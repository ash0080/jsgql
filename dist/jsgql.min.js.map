{"version":3,"file":"jsgql.min.js","sources":["../src/jsgql.js"],"sourcesContent":["'use strict'\n\nconst gql = require('graphql-tag')\n\nfunction jsgql ({ type, name, variables, method, fields, types }) {\n  let gqlStr = `${type} ${name}`\n\n  gqlStr = `${gqlStr}${processName(variables, types)} {\n    ${method}${processMethod(variables)} {\n      ${processFields(fields)}\n    }\n  }`\n\n  return gql(gqlStr)\n}\n\nfunction typeOf (obj) {\n  let type = {}.toString.call(obj).split(' ')[1].slice(0, -1)\n\n  return type === 'Number' ? 'Int' : type\n}\n\nfunction processName (variables, types = {}) {\n  if (!variables) return ''\n  let variablesList = []\n\n  for (let name in variables) {\n    let value = variables[name]\n    let type = types[name] || typeOf(value)\n\n    if (name.includes('id') || name.includes('Id')) type = 'ID'\n\n    variablesList.push(`$${name}: ${type}!`)\n  }\n\n  return `(${variablesList.join(', ')})`\n}\n\nfunction processMethod (variables) {\n  if (!variables) return ''\n\n  let variablesList = []\n\n  for (let name in variables) {\n    variablesList.push(`${name}: $${name}`)\n  }\n\n  return `(${variablesList.join(', ')})`\n}\n\nfunction processFields (fields) {\n  if (!fields) return ''\n\n  return fields.reduce((fieldsStr, field) => {\n    if (Array.isArray(field)) {\n      let [key, subFields] = field\n\n      fieldsStr += ` ${key} {\n        ${processFields(subFields)}\n      }`\n    } else {\n      fieldsStr += `${field}\\n`\n    }\n\n    return fieldsStr\n  }, '')\n}\n\nexports = module.exports = jsgql\nexports.processName = processName\nexports.processMethod = processMethod\nexports.processFields = processFields\nexports.typeOf = typeOf\nexports.gql = gql\n"],"names":["typeOf","obj","let","type","toString","call","split","slice","processName","variables","types","variablesList","name","value","includes","push","join","processMethod","processFields","fields","reduce","fieldsStr","field","Array","isArray","exports","module","ref","method","gqlStr","gql"],"mappings":"+WAgBA,SAASA,EAAQC,GACfC,IAAIC,KAAUC,SAASC,KAAKJ,GAAKK,MAAM,KAAK,GAAGC,MAAM,GAAI,GAEzD,MAAgB,WAATJ,EAAoB,MAAQA,EAGrC,SAASK,EAAaC,EAAWC,GAC/B,uBAAKD,EAAW,MAAO,GACvBP,IAAIS,KAEJ,IAAKT,IAAIU,KAAQH,EAAW,CAC1BP,IAAIW,EAAQJ,EAAUG,GAClBT,EAAOO,EAAME,IAASZ,EAAOa,IAE7BD,EAAKE,SAAS,OAASF,EAAKE,SAAS,SAAOX,EAAO,MAEvDQ,EAAcI,KAAK,IAAIH,OAAST,OAGlC,MAAO,IAAIQ,EAAcK,KAAK,UAGhC,SAASC,EAAeR,GACtB,IAAKA,EAAW,MAAO,GAEvBP,IAAIS,KAEJ,IAAKT,IAAIU,KAAQH,EACfE,EAAcI,KAAKH,QAAaA,GAGlC,MAAO,IAAID,EAAcK,KAAK,UAGhC,SAASE,EAAeC,GACtB,OAAKA,EAEEA,EAAOC,OAAO,SAACC,EAAWC,GAW/B,OAVIC,MAAMC,QAAQF,GAGhBD,GAAa,wBACTH,oBAGJG,GAAaC,OAGRD,GACN,IAdiB,IAiBtBI,EAAUC,UAhEV,SAAgBC,OAAExB,SAAMS,SAAMH,cAAWmB,WAAQT,WAC3CU,EAAS1B,MAAWS,EAQxB,OANAiB,EAAS,GAAGA,EAASrB,EAAYC,sBAC7BmB,EAASX,EAAcR,gBACrBS,EAAcC,kBAIbW,EAAID,iBAwDSrB,EACtBiB,gBAAwBR,EACxBQ,gBAAwBP,EACxBO,SAAiBzB,EACjByB,MAAcK"}