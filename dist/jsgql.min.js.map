{"version":3,"file":"jsgql.min.js","sources":["../src/jsgql.js"],"sourcesContent":["'use strict'\n\nconst gql = require('graphql-tag')\n\nfunction jsgql ({ type, name, variables, method, fields, types, methodArgs }) {\n  let gqlStr = `${type} ${name}`\n\n  gqlStr = `${gqlStr}${processName(variables, types)} {\n    ${method}${processMethod(variables, methodArgs)} {\n      ${processFields(fields)}\n    }\n  }`\n\n  return gql(gqlStr)\n}\n\nconst RESERVED_VALUES = ['__variable__', '__type__']\n\nfunction valueReserved (value) {\n  return Object.keys(value).some(key => RESERVED_VALUES.includes(key))\n}\n\nfunction processValue (value) {\n  if (value.__variable__) return `$${value.__variable__}`\n  else if (value.__type__) return value.__type__\n  else return processType(value) === 'String' ? `\"${value}\"` : value\n}\n\nfunction processType (obj) {\n  let type = {}.toString.call(obj).split(' ')[1].slice(0, -1)\n\n  return type === 'Number' ? 'Int' : type\n}\n\nfunction processName (variables, types = {}) {\n  if (!variables) return ''\n  let variablesList = []\n\n  for (let name in variables) {\n    let value = variables[name]\n    let type = types[name] || processType(value)\n\n    if (name.includes('id') || name.includes('Id')) type = 'ID'\n\n    variablesList.push(`$${name}: ${type}!`)\n  }\n\n  return `(${variablesList.join(', ')})`\n}\n\nfunction processMethod (variables, methodArgs) {\n  if (!variables) return methodArgs ? `(${processMethodArgs(methodArgs)})` : ''\n\n  let variablesList = []\n\n  for (let name in variables) {\n    variablesList.push(`${name}: $${name}`)\n  }\n\n  let methodString = `(${variablesList.join(', ')}`\n\n  if (methodArgs) methodString += `, ${processMethodArgs(methodArgs)}`\n\n  methodString += ')'\n\n  return methodString\n}\n\nfunction processMethodArgs (args) {\n  if (!args) return ''\n\n  let argsList = []\n\n  for (let name in args) {\n    let value = args[name]\n\n    if (!Array.isArray(value) && typeof value === 'object' && !valueReserved(value)) {\n      argsList.push(`${name}: { ${processMethodArgs(value)} }`)\n    } else {\n      if (Array.isArray(value)) value = `[${value.map(v => processValue(v)).join(', ')}]`\n      else value = processValue(value)\n\n      argsList.push(`${name}: ${value}`)\n    }\n  }\n\n  return argsList.join(', ')\n}\n\nfunction processFields (fields) {\n  if (!fields) return ''\n\n  return fields.reduce((fieldsStr, field) => {\n    if (Array.isArray(field)) {\n      let [key, subFields] = field\n\n      fieldsStr += ` ${key} {\n        ${processFields(subFields)}\n      }`\n    } else {\n      fieldsStr += `${field}\\n`\n    }\n\n    return fieldsStr\n  }, '')\n}\n\nexports = module.exports = jsgql\nexports.processName = processName\nexports.processMethod = processMethod\nexports.processMethodArgs = processMethodArgs\nexports.processFields = processFields\nexports.processType = processType\nexports.processValue = processValue\nexports.gql = gql\n"],"names":["valueReserved","value","Object","keys","some","key","RESERVED_VALUES","includes","processValue","__variable__","__type__","processType","obj","let","type","toString","call","split","slice","processName","variables","types","variablesList","name","push","join","processMethod","methodArgs","processMethodArgs","methodString","args","argsList","Array","isArray","map","v","processFields","fields","reduce","fieldsStr","field","const","exports","module","ref","method","gqlStr","gql"],"mappings":"+WAkBA,SAASA,EAAeC,GACtB,OAAOC,OAAOC,KAAKF,GAAOG,KAAK,SAAAC,UAAOC,EAAgBC,SAASF,KAGjE,SAASG,EAAcP,GACrB,OAAIA,EAAMQ,aAAqB,IAAIR,EAAkB,aAC5CA,EAAMS,SAAiBT,EAAMS,SACH,WAAvBC,EAAYV,GAAsB,IAAIA,MAAWA,EAG/D,SAASU,EAAaC,GACpBC,IAAIC,KAAUC,SAASC,KAAKJ,GAAKK,MAAM,KAAK,GAAGC,MAAM,GAAI,GAEzD,MAAgB,WAATJ,EAAoB,MAAQA,EAGrC,SAASK,EAAaC,EAAWC,GAC/B,uBAAKD,EAAW,MAAO,GACvBP,IAAIS,KAEJ,IAAKT,IAAIU,KAAQH,EAAW,CAC1BP,IAAIZ,EAAQmB,EAAUG,GAClBT,EAAOO,EAAME,IAASZ,EAAYV,IAElCsB,EAAKhB,SAAS,OAASgB,EAAKhB,SAAS,SAAOO,EAAO,MAEvDQ,EAAcE,KAAK,IAAID,OAAST,OAGlC,MAAO,IAAIQ,EAAcG,KAAK,UAGhC,SAASC,EAAeN,EAAWO,GACjC,IAAKP,EAAW,OAAOO,EAAa,IAAIC,EAAkBD,OAAiB,GAE3Ed,IAAIS,KAEJ,IAAKT,IAAIU,KAAQH,EACfE,EAAcE,KAAKD,QAAaA,GAGlCV,IAAIgB,EAAe,IAAIP,EAAcG,KAAK,MAM1C,OAJIE,IAAYE,GAAgB,KAAKD,EAAkBD,IAEvDE,GAAgB,IAKlB,SAASD,EAAmBE,GAC1B,IAAKA,EAAM,MAAO,GAElBjB,IAAIkB,KAEJ,IAAKlB,IAAIU,KAAQO,EAAM,CACrBjB,IAAIZ,EAAQ6B,EAAKP,GAEZS,MAAMC,QAAQhC,IAA2B,iBAAVA,GAAuBD,EAAcC,IAG7CA,EAAtB+B,MAAMC,QAAQhC,GAAgB,IAAIA,EAAMiC,IAAI,SAAAC,UAAK3B,EAAa2B,KAAIV,KAAK,UAC9DjB,EAAaP,GAE1B8B,EAASP,KAAKD,OAAYtB,IAL1B8B,EAASP,KAAKD,SAAcK,EAAkB3B,SASlD,OAAO8B,EAASN,KAAK,MAGvB,SAASW,EAAeC,GACtB,OAAKA,EAEEA,EAAOC,OAAO,SAACC,EAAWC,GAW/B,OAVIR,MAAMC,QAAQO,GAGhBD,GAAa,wBACTH,oBAGJG,GAAaC,OAGRD,GACN,IAdiB,GA1EtBE,IAAMnC,GAAmB,eAAgB,aA2FzCoC,EAAUC,UAvGV,SAAgBC,OAAE9B,SAAMS,SAAMH,cAAWyB,WAAQR,WAAQhB,UAAOM,eAC1DmB,EAAShC,MAAWS,EAQxB,OANAuB,EAAS,GAAGA,EAAS3B,EAAYC,EAAWC,cACxCwB,EAASnB,EAAcN,EAAWO,gBAChCS,EAAcC,kBAIbU,EAAID,iBA+FS3B,EACtBuB,gBAAwBhB,EACxBgB,oBAA4Bd,EAC5Bc,gBAAwBN,EACxBM,cAAsB/B,EACtB+B,eAAuBlC,EACvBkC,MAAcK"}